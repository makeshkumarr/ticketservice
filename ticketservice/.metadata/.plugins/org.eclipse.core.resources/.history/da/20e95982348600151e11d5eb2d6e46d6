package org.test.ticketservice.dao.tables;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;











import org.test.ticketservice.vo.LevelRowSeat;

public enum MockLevelRowsTable {
	INSTANCE;
	
	Map<Integer,Map<Integer,Map<Integer,LevelRowSeat>>> venueLevelSeats = new HashMap<Integer, Map<Integer, Map<Integer,LevelRowSeat>>>();
	
	/*
	 * Set up the initial data
	 */
	private MockLevelRowsTable() {
		LevelRowSeat rowSeat = null;
		//Orchestra level
		Map<Integer, Map<Integer, LevelRowSeat>> rowSeats = new HashMap<Integer, Map<Integer, LevelRowSeat>>();
		Map<Integer, LevelRowSeat> rowSeatMap = new HashMap<Integer, LevelRowSeat>();
		int levelId = 1;
		for(int rowCount=1; rowCount<=25; rowCount++) {
			rowSeatMap = new HashMap<Integer, LevelRowSeat>();
			for(int seatNumCount=1; seatNumCount<=50; seatNumCount++) {
				rowSeat = new LevelRowSeat(levelId, rowCount, seatNumCount);
				rowSeatMap.put(seatNumCount, rowSeat);
			}
			rowSeats.put(rowCount, rowSeatMap);
		}
		venueLevelSeats.put(levelId, rowSeats);
		
		//Main level
		rowSeats = new HashMap<Integer, Map<Integer, LevelRowSeat>>();
		rowSeatMap = new HashMap<Integer, LevelRowSeat>();
		levelId = 2;
		for(int rowCount=1; rowCount<=20; rowCount++) {
			rowSeatMap = new HashMap<Integer, LevelRowSeat>();
			for(int seatNumCount=1; seatNumCount<=100; seatNumCount++) {
				rowSeat = new LevelRowSeat(levelId, rowCount, seatNumCount);
				rowSeatMap.put(seatNumCount, rowSeat);
			}
			rowSeats.put(rowCount, rowSeatMap);
		}
		venueLevelSeats.put(levelId, rowSeats);
		
		//Balcony 1 level
		rowSeats = new HashMap<Integer, Map<Integer, LevelRowSeat>>();
		rowSeatMap = new HashMap<Integer, LevelRowSeat>();
		levelId = 3;
		for(int rowCount=1; rowCount<=15; rowCount++) {
			rowSeatMap = new HashMap<Integer, LevelRowSeat>();
			for(int seatNumCount=1; seatNumCount<=100; seatNumCount++) {
				rowSeat = new LevelRowSeat(levelId, rowCount, seatNumCount);
				rowSeatMap.put(seatNumCount, rowSeat);
			}
			rowSeats.put(rowCount, rowSeatMap);
		}
		venueLevelSeats.put(levelId, rowSeats);
		
		//Balcony 2 level
		rowSeats = new HashMap<Integer, Map<Integer, LevelRowSeat>>();
		rowSeatMap = new HashMap<Integer, LevelRowSeat>();
		levelId = 4;
		for(int rowCount=1; rowCount<=15; rowCount++) {
			rowSeatMap = new HashMap<Integer, LevelRowSeat>();
			for(int seatNumCount=1; seatNumCount<=100; seatNumCount++) {
				rowSeat = new LevelRowSeat(levelId, rowCount, seatNumCount);
				rowSeatMap.put(seatNumCount, rowSeat);
			}
			rowSeats.put(rowCount, rowSeatMap);
		}
		venueLevelSeats.put(levelId, rowSeats);
	}
	
	public LevelRowSeat getLevelRowSeat(int levelId, int rowNumber, int seatNumber) {
		Map<Integer,Map<Integer, LevelRowSeat>> levelRowsMap = venueLevelSeats.get(levelId);
		if(levelRowsMap == null) {
			return new LevelRowSeat(levelId,rowNumber, seatNumber);
		}
		Map<Integer, LevelRowSeat> rowSeatsMap = levelRowsMap.get(rowNumber);
		if(rowSeatsMap == null) {
			return new LevelRowSeat(levelId,rowNumber, seatNumber);
		}
		LevelRowSeat seat = rowSeatsMap.get(seatNumber);
		return seat;
	}
	
	public List<LevelRowSeat> getAllLevelAvailableSeats() {
		List<LevelRowSeat> allAvailableSeats= new ArrayList<LevelRowSeat>();
		if(venueLevelSeats!=null && !venueLevelSeats.isEmpty()) {
			Collection<Map<Integer, Map<Integer, LevelRowSeat>>> venueLevelSeatsEntries = venueLevelSeats.values();
			venueLevelSeatsEntries.forEach(e -> {Collection<Map<Integer, LevelRowSeat>> rowSeatsMap = e.values();
						rowSeatsMap.forEach(a -> {Collection<LevelRowSeat> rowSeats = a.values();
						rowSeats.forEach(b -> {if(!(b.isHeld()|| b.isReserved())){allAvailableSeats.add(b);}});
						});
				});
		}
		return allAvailableSeats;
	}	
	
	public List<LevelRowSeat> getLevelAvailableSeats(int levelId) {
		List<LevelRowSeat> allAvailableSeats= new ArrayList<LevelRowSeat>();
		Map<Integer, Map<Integer, LevelRowSeat>> levelSeats = venueLevelSeats.get(levelId);
		if(levelSeats!=null && !levelSeats.isEmpty()) {
			Collection<Map<Integer, LevelRowSeat>> venueLevelSeatsEntries = levelSeats.values();
			venueLevelSeatsEntries.forEach(e -> {Collection<LevelRowSeat> rowSeats = e.values();
						rowSeats.forEach(b -> {if(!(b.isHeld()|| b.isReserved())){allAvailableSeats.add(b);}});
			});
		}
		return allAvailableSeats;
	}	
	
	public void reserveSeat(int levelId, int rowNumber, int seatNumber) {
		LevelRowSeat levelRowSeat = getLevelRowSeat(levelId, rowNumber, seatNumber);
		levelRowSeat.reserverSeat();
	}
	
	public void holdSeat(int levelId, int rowNumber, int seatNumber) {
		LevelRowSeat levelRowSeats = getLevelRowSeat(levelId, rowNumber, seatNumber);
		levelRowSeats.holdSeat();
	}
	
	public void unreserveSeat(int levelId, int rowNumber, int seatNumber) {
		LevelRowSeat levelRowSeat = getLevelRowSeat(levelId, rowNumber, seatNumber);
		levelRowSeat.unreserveSeat();
	}
	
	public void releaseSeat(int levelId, int rowNumber, int seatNumber) {
		LevelRowSeat levelRowSeats = getLevelRowSeat(levelId, rowNumber, seatNumber);
		levelRowSeats.releaseSeat();
	}
}
