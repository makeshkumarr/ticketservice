package org.test.ticketservice.dao.tables;

import java.util.HashMap;
import java.util.Map;

import org.test.ticketservice.vo.LevelRowSeat;

public enum MockLevelRowsTable {
	INSTANCE;
	
	Map<Integer,Map<Integer,Map<Integer,LevelRowSeat>>> venueLevelSeats = new HashMap<Integer, Map<Integer, Map<Integer,LevelRowSeat>>>();
	
	/*
	 * Set up the initial data
	 */
	private MockLevelRowsTable() {
		LevelRowSeat rowSeat = null;
		//Orchestra level
		Map<Integer, Map<Integer, LevelRowSeat>> rowSeats = new HashMap<Integer, Map<Integer, LevelRowSeat>>();
		Map<Integer, LevelRowSeat> rowSeatMap = new HashMap<Integer, LevelRowSeat>();
		int levelId = 1;
		for(int rowCount=1; rowCount<=25; rowCount++) {
			rowSeatMap = new HashMap<Integer, LevelRowSeat>();
			for(int seatNumCount=1; seatNumCount<=50; seatNumCount++) {
				rowSeat = new LevelRowSeat(levelId, rowCount, seatNumCount);
				rowSeatMap.put(seatNumCount, rowSeat);
			}
			rowSeats.put(rowCount, rowSeatMap);
		}
		venueLevelSeats.put(levelId, rowSeats);
		
		//Main level
		rowSeats = new HashMap<Integer, Map<Integer, LevelRowSeat>>();
		rowSeatMap = new HashMap<Integer, LevelRowSeat>();
		levelId = 2;
		for(int rowCount=1; rowCount<=20; rowCount++) {
			rowSeatMap = new HashMap<Integer, LevelRowSeat>();
			for(int seatNumCount=1; seatNumCount<=100; seatNumCount++) {
				rowSeat = new LevelRowSeat(levelId, rowCount, seatNumCount);
				rowSeatMap.put(seatNumCount, rowSeat);
			}
			rowSeats.put(rowCount, rowSeatMap);
		}
		venueLevelSeats.put(levelId, rowSeats);
		
		//Balcony 1 level
		rowSeats = new HashMap<Integer, Map<Integer, LevelRowSeat>>();
		rowSeatMap = new HashMap<Integer, LevelRowSeat>();
		levelId = 3;
		for(int rowCount=1; rowCount<=15; rowCount++) {
			rowSeatMap = new HashMap<Integer, LevelRowSeat>();
			for(int seatNumCount=1; seatNumCount<=100; seatNumCount++) {
				rowSeat = new LevelRowSeat(levelId, rowCount, seatNumCount);
				rowSeatMap.put(seatNumCount, rowSeat);
			}
			rowSeats.put(rowCount, rowSeatMap);
		}
		venueLevelSeats.put(levelId, rowSeats);
		
		//Balcony 2 level
		rowSeats = new HashMap<Integer, Map<Integer, LevelRowSeat>>();
		rowSeatMap = new HashMap<Integer, LevelRowSeat>();
		levelId = 4;
		for(int rowCount=1; rowCount<=15; rowCount++) {
			rowSeatMap = new HashMap<Integer, LevelRowSeat>();
			for(int seatNumCount=1; seatNumCount<=100; seatNumCount++) {
				rowSeat = new LevelRowSeat(levelId, rowCount, seatNumCount);
				rowSeatMap.put(seatNumCount, rowSeat);
			}
			rowSeats.put(rowCount, rowSeatMap);
		}
		venueLevelSeats.put(levelId, rowSeats);
	}
	
	public LevelRowSeat getLevelRowSeat(int levelId, int rowNumber, int seatNumber) {
		Map<Integer,Map<Integer, LevelRowSeat>> levelRowsMap = venueLevelSeats.get(levelId);
		if(levelRowsMap == null) {
			return new LevelRowSeat(levelId,rowNumber, seatNumber);
		}
		Map<Integer, LevelRowSeat> rowSeatsMap = levelRowsMap.get(rowNumber);
		if(rowSeatsMap == null) {
			return new LevelRowSeat(levelId,rowNumber, seatNumber);
		}
		LevelRowSeat seat = rowSeatsMap.get(seatNumber);
		return seat;
	}
	
	public void reserveSeats(int levelId, int rowNumber, int noOfSeats) {
		LevelRowSeat levelRowSeats = getLevelRowSeats(levelId, rowNumber);
		levelRowSeats.addReservedSeats(noOfSeats);
	}
	
	public void holdSeats(int levelId, int rowNumber, int noOfSeats) {
		LevelRowSeat levelRowSeats = getLevelRowSeats(levelId, rowNumber);
		levelRowSeats.addHoldSeats(noOfSeats);
	}
}
