package org.test.ticketservice;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

import org.junit.Test;
import org.test.ticketservice.dao.LevelSeatsDao;
import org.test.ticketservice.dao.impl.LevelSeatsDaoImpl;
import org.test.ticketservice.services.TicketService;
import org.test.ticketservice.services.impl.TicketServiceImpl;
import org.test.ticketservice.vo.IRowSeat;
import org.test.ticketservice.vo.SeatHold;

import static org.junit.Assert.*;
public class TicketServiceTest {

	private TicketService ticketService = new TicketServiceImpl();
	private LevelSeatsDao levelDao = new LevelSeatsDaoImpl();

	@Test
	public void testNumSeatsAvailable() {
		assertEquals(6250,ticketService.numSeatsAvailable(Optional.empty()));		
		assertEquals(1250,ticketService.numSeatsAvailable(Optional.of(1)));
		assertEquals(2000,ticketService.numSeatsAvailable(Optional.of(2)));
		assertEquals(1500,ticketService.numSeatsAvailable(Optional.of(3)));
		assertEquals(1500,ticketService.numSeatsAvailable(Optional.of(4)));

	}
	
	@Test
	public void testFindAndHoldSeats() {
		int numSeatsNeeded = 1;
		String customerEmail = "makeshkumar.r@gmail.com";
		SeatHold seatHold = ticketService.findAndHoldSeats(numSeatsNeeded, Optional.of(1), Optional.of(2), customerEmail);
		assertEquals(6249,ticketService.numSeatsAvailable(Optional.empty()));	
		List<IRowSeat> heldSeats = levelDao.getHeldSeats(seatHold.getSeatHoldId());
		assertEquals(numSeatsNeeded, heldSeats.size());
		ticketService.reserveSeats(seatHold.getSeatHoldId(), customerEmail);
		List<IRowSeat> reservedSeats = levelDao.getReservedSeats(customerEmail);
		assertEquals(numSeatsNeeded, reservedSeats.size());

	}
	
	@Test
	public void test10() throws InterruptedException, ExecutionException{
		test(10);
		String customerEmail = "makeshkumar.r@gmail.com";
		List<IRowSeat> reservedSeats = levelDao.getReservedSeats(customerEmail);
		assertEquals(100, reservedSeats.size());
	}
	
    private void test(final int threadCount) throws InterruptedException, ExecutionException {
    	 TicketService ticketService = new TicketServiceImpl(); 
    	 final String customerEmail = "makeshkumar.r@gmail.com";
    	 Callable<Integer> task = new Callable<Integer>() {
            @Override
            public Integer call() {
            	
            	 SeatHold seatHold = ticketService.findAndHoldSeats(10, Optional.of(1), Optional.of(2), customerEmail);        
            	 return seatHold.getSeatHoldId();
            }
        };
        List<Callable<Integer>> tasks = Collections.nCopies(threadCount, task);
        ExecutorService executorService = Executors.newFixedThreadPool(threadCount);
        List<Future<Integer>> futures = executorService.invokeAll(tasks);
        List<Integer> resultList = new ArrayList<Integer>(futures.size());
        // Check for exceptions
        for (Future<Integer> future : futures) {
            // Throws an exception if an exception was thrown by the task.
            resultList.add(future.get());
        }
        // Validate the IDs
        assertEquals(threadCount, futures.size());
        List<Long> expectedList = new ArrayList<Long>(threadCount);
        for (long i = 0; i < threadCount; i++) {
            expectedList.add(i);
        }
        Collections.sort(resultList);
        assertEquals(expectedList, resultList);
    }
}
