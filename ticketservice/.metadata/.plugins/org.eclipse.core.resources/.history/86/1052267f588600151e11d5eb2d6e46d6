package org.test.ticketservice.services.impl;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.test.ticketservice.dao.LevelSeatsDao;
import org.test.ticketservice.dao.impl.LevelSeatsDaoImpl;
import org.test.ticketservice.services.TicketService;
import org.test.ticketservice.vo.IRowSeat;
import org.test.ticketservice.vo.LevelRowSeat;
import org.test.ticketservice.vo.SeatHold;

public class TicketServiceImpl implements TicketService {
	
	
	private static final int VENUE_MAX_LEVEL = 4;

	private static final int VENUE_MIN_LEVEL = 1;
	
	private LevelSeatsDao levelDao = new LevelSeatsDaoImpl();

	@Override
	public int numSeatsAvailable(Optional<Integer> venueLevel) {
		if(venueLevel !=null && venueLevel.isPresent()) {
			return levelDao.countLevelAvailableSeats(venueLevel.get());
		}else {
			return levelDao.countAllLevelAvailableSeats();
		}
	}

	@Override
	public SeatHold findAndHoldSeats(int numSeats, Optional<Integer> minLevel,
			Optional<Integer> maxLevel, String customerEmail) {
		int minimumLevel = minLevel.orElse(VENUE_MIN_LEVEL);
		int maximumLevel = maxLevel.orElse(VENUE_MAX_LEVEL);
		
		List<IRowSeat> levelAvailableSeats = null;
		int availableSeatsCount = 0;
		for(int levelCount=minimumLevel; levelCount<maximumLevel; levelCount++) {
			availableSeatsCount = levelDao.countLevelAvailableSeats(levelCount);
			if(availableSeatsCount>=numSeats) {
				levelAvailableSeats = levelDao.getLevelAvailableSeats(levelCount);
				levelAvailableSeats.forEach(e -> {levelDao.holdLevelSeat(e.getLevelId(), e.getRowNumber(), e.getSeatNumber(),UUID.randomUUID().toString());});
			}else {
				/*
				 * if seats are not available in a level
				 */
			}
		}
		return null;
	}

	@Override
	public String reserveSeats(int seatHoldId, String customerEmail) {
		// TODO Auto-generated method stub
		return null;
	}

}
